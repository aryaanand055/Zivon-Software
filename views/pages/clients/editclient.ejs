<div class="container my-5">
  <div class="card shadow-lg p-4 rounded-4">
    <h2 class="mb-4 text-center fw-bold">Edit Client</h2>

    <form id="edit-client-form" action="/clients/edit/<%= client.memberID %>" method="POST" novalidate>
      <div class="mb-3">
        <label for="memberID" class="form-label">Member ID</label>
        <input type="text" class="form-control" value="<%= client.memberID %>" readonly disabled>
      </div>
      <input type="hidden" id="memberID" name="memberID" value="<%= client.memberID %>">


      <div class="mb-3">
        <label for="name" class="form-label">Full Name</label>
        <input type="text" class="form-control" id="name" name="name" value="<%= client.name %>" required>
        <div class="invalid-feedback">Please provide a valid name.</div>
      </div>

      <div class="mb-3">
        <label for="email" class="form-label">Email address</label>
        <input type="email" class="form-control" id="email" name="email" value="<%= client.email %>">
        <div class="invalid-feedback">Please provide a valid email address.</div>
      </div>

      <div class="mb-3">
        <label for="mobile" class="form-label">Mobile Number</label>
        <input type="text" class="form-control" id="mobile" name="mobile" value="<%= client.mobile %>" required>
        <div class="invalid-feedback">Please provide a valid 10-digit mobile number.</div>
      </div>

      <div class="mb-3">
        <label for="dob" class="form-label">Date of Birth</label>
        <input type="date" class="form-control" id="dob" name="dob" value="<%= client.dob.toISOString().split('T')[0] %>" required>
        <div class="invalid-feedback">Please provide a valid date of birth.</div>
      </div>

      <div class="mb-3">
        <label for="joinDate" class="form-label">Join Date</label>
        <input type="date" class="form-control" id="joinDate" name="joinDate" value="<%= client.joinDate.toISOString().split('T')[0] %>" required>
        <div class="invalid-feedback">Please provide a valid join date.</div>
      </div>

      <div class="mb-3">
        <label for="medicalHistory" class="form-label">Medical History</label>
        <textarea class="form-control" id="medicalHistory" name="medicalHistory" rows="2"><%= client.medicalHistory %></textarea>
        <div class="invalid-feedback">Please provide valid medical history details.</div>
      </div>

      <!-- Validation summary message -->
      <div id="validationSummary" class="text-danger fw-semibold mb-2" style="display:none;"></div>

      <button type="submit" class="btn btn-success w-100" id="updateClientBtn">
        <span id="updateClientBtnText">Update Client</span>
        <span id="updateClientSpinner" class="spinner-border spinner-border-sm ms-2" style="display:none;" role="status" aria-hidden="true"></span>
      </button>
    </form>
  </div>
</div>

<script>
  const form = document.getElementById("edit-client-form");

  const fields = {
    name: {
      el: document.getElementById("name"),
      validate: (val) => val.trim() !== "",
    },
    email: {
      el: document.getElementById("email"),
      validate: (val) => /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(val.trim()),
    },
    mobile: {
      el: document.getElementById("mobile"),
      validate: (val) => {
        const digits = val.replace(/\D/g, "");
        return /^\d{10}$/.test(digits.slice(-10));
      },
      normalize: (val) => {
        const digits = val.replace(/\D/g, "");
        return digits.slice(-10);
      }
    },
    dob: {
      el: document.getElementById("dob"),
      validate: (val) => {
        if (!val) return false;
        const dobDate = new Date(val);
        const today = new Date();
        const hundredYearsAgo = new Date();
        hundredYearsAgo.setFullYear(today.getFullYear() - 100);
        return dobDate <= today && dobDate >= hundredYearsAgo;
      }
    },
    joinDate: {
      el: document.getElementById("joinDate"),
      validate: (val) => {
        if (!val) return false;
        const join = new Date(val);
        const today = new Date();
        return join <= today;
      }
    }
  };

  // Validation summary
  function updateSubmitState() {
    const validationSummary = document.getElementById('validationSummary');
    let messages = [];
    Object.entries(fields).forEach(([key, {
      el,
      validate
    }]) => {
      if (!validate(el.value.trim()) || el.classList.contains("is-invalid")) {
        messages.push("Please check your inputs.");
      }
    });
    if (messages.length > 0) {
      validationSummary.textContent = messages[0];
      validationSummary.style.display = "block";
      document.getElementById("updateClientBtn").disabled = true;
    } else {
      validationSummary.style.display = "none";
      document.getElementById("updateClientBtn").disabled = false;
    }
  }

  // Duplicate check for email/mobile without debounce
  ["email", "mobile"].forEach((key) => {
    const el = fields[key].el;
    let lastValue = "";
    const original = el.getAttribute("value");

    async function validateAndCheck() {
      let value = el.value.trim();
      if (key === "mobile") {
        value = fields.mobile.normalize(value);
      }
      if (value === lastValue) return;
      lastValue = value;

      if (!fields[key].validate(el.value.trim())) {
        el.classList.add("is-invalid");
        el.classList.remove("is-valid");
        updateSubmitState();
        return;
      }

      // Only check duplicate if changed
      if (value !== original) {
        const payload = {};
        payload[key] = value;
        try {
          const res = await fetch('/clients/check-duplicate', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(payload)
          });
          const data = await res.json();
          const exists = data[`${key}Exists`];
          if (exists) {
            el.classList.add("is-invalid");
            el.classList.remove("is-valid");
            el.nextElementSibling.textContent = `${key === 'email' ? 'Email' : 'Mobile'} already exists.`;
          } else {
            el.classList.remove("is-invalid");
            el.classList.add("is-valid");
            el.nextElementSibling.textContent = key === 'email' ?
              'Please provide a valid email address.' :
              'Please provide a valid 10-digit mobile number.';
          }
        } catch (err) {
          console.error(`Error checking ${key}:`, err);
        }
      } else {
        el.classList.remove("is-invalid");
        el.classList.add("is-valid");
        el.nextElementSibling.textContent = key === 'email' ?
          'Please provide a valid email address.' :
          'Please provide a valid 10-digit mobile number.';
      }
      updateSubmitState();
    }

    el.addEventListener("input", validateAndCheck);
    el.addEventListener("blur", validateAndCheck);
  });

  Object.entries(fields).forEach(([key, {
    el,
    validate
  }]) => {
    if (key === "email" || key === "mobile") return;
    el.addEventListener("blur", () => {
      const value = el.value.trim();
      if (!validate(value)) {
        el.classList.add("is-invalid");
        el.classList.remove("is-valid");
      } else {
        el.classList.remove("is-invalid");
        el.classList.add("is-valid");
      }
      updateSubmitState();
    });
    el.addEventListener("input", () => {
      const value = el.value.trim();
      if (!validate(value)) {
        el.classList.add("is-invalid");
        el.classList.remove("is-valid");
      } else {
        el.classList.remove("is-invalid");
        el.classList.add("is-valid");
      }
      updateSubmitState();
    });
  });

  // Initial validation on page load
  window.addEventListener("DOMContentLoaded", () => {
    Object.entries(fields).forEach(([key, {
      el,
      validate,
      normalize
    }]) => {
      let value = el.value.trim();
      if (normalize && value) value = normalize(value);
      if (!validate(value)) {
        el.classList.add("is-invalid");
        el.classList.remove("is-valid");
      } else {
        el.classList.remove("is-invalid");
        el.classList.add("is-valid");
      }
    });
    updateSubmitState();
  });

  form.addEventListener("submit", function(e) {
    let isValid = true;
    Object.entries(fields).forEach(([key, {
      el,
      validate,
      normalize
    }]) => {
      let value = el.value.trim();
      if (normalize && value) value = normalize(value);
      if (!validate(value)) {
        el.classList.add("is-invalid");
        isValid = false;
      } else {
        el.classList.remove("is-invalid");
      }
    });
    updateSubmitState();
    if (!isValid) {
      e.preventDefault();
    } else {
      // Normalize mobile before submit
      fields.mobile.el.value = fields.mobile.normalize(fields.mobile.el.value.trim());

      // Show loader on button
      const btn = document.getElementById("updateClientBtn");
      const btnText = document.getElementById("updateClientBtnText");
      const spinner = document.getElementById("updateClientSpinner");
      btn.disabled = true;
      btnText.style.opacity = "0.5";
      spinner.style.display = "inline-block";
    }
  });
</script>